/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {
    //default: do not publish process results

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    // read_processing

    withName: RAW_FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.raw_fastqc" }
        publishDir = [
            path: { "${params.outdir}/read_processing/raw_fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TRIM_FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.trim_fastqc" }
        publishDir = [
            path: { "${params.outdir}/read_processing/trim_fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/read_processing/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{html,json,gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_RUN {
        publishDir = [
            path: { "${params.outdir}/read_processing/kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // assembly

    withName: UNICYCLER {
        publishDir = [
            path: { "${params.outdir}/assembly/unicycler/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/assembly/quast/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CHECKM_LINEAGEWF {
        publishDir = [
            path: { "${params.outdir}/assembly/checkm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // annotation

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/annotation/prokka/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RGI {
        publishDir = [
            path: { "${params.outdir}/annotation/rgi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MOB_RECON {
        publishDir = [
            path: { "${params.outdir}/annotation/mob_recon/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA {
        publishDir = [
            path: { "${params.outdir}/annotation/bakta/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLAST_CAZY {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_CAZYDB" }
        publishDir = [
            path: { "${params.outdir}/annotation/cazy/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CAZY_FILTER:CONCAT_ALIGNMENT' {
        publishDir = [
            path: { "${params.outdir}/annotation/cazy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*VFDB_FILTER:CONCAT_ALIGNMENT' {
        publishDir = [
            path: { "${params.outdir}/annotation/vfdb/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*BACMET_FILTER:CONCAT_ALIGNMENT' {
        publishDir = [
            path: { "${params.outdir}/annotation/bacmet/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLAST_VFDB {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_VFDB" }
        publishDir = [
            path: { "${params.outdir}/annotation/vfdb/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLAST_BACMET {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_BACMET" }
        publishDir = [
            path: { "${params.outdir}/annotation/bacmet/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //  pangenomics
    withName: PANAROO_RUN {
        ext.args = "-a pan --clean-mode strict --len_dif_percent 0.70 -c 0.7 -f 0.5"
        publishDir = [
            path: { "${params.outdir}/pangenomics/panaroo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // phylogenomics
    withName: IQTREE {
        publishDir = [
            path: { "${params.outdir}/phylogenomics/iqtree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTTREE {
        publishDir = [
            path: { "${params.outdir}/phylogenomics/fasttree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SNPSITES {
        publishDir = [
            path: { "${params.outdir}/phylogenomics/snpsites" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GET_SOFTWARE_VERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

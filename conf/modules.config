/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {
    //default: do not publish process results

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    // read_processing

    withName: RAW_FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.raw_fastqc" }
        publishDir = [
            path: { "${params.outdir}/read_processing/raw_fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TRIM_FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.trim_fastqc" }
        publishDir = [
            path: { "${params.outdir}/read_processing/trim_fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/read_processing/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{html,json,gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_RUN {
        publishDir = [
            path: { "${params.outdir}/read_processing/kraken2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // assembly

    withName: UNICYCLER {
        publishDir = [
            path: { "${params.outdir}/assembly/unicycler/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/assembly/quast/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CHECKM_LINEAGEWF {
        publishDir = [
            path: { "${params.outdir}/assembly/checkm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // annotation

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/annotation/prokka/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PROKKA_ADD_COLUMN {
        publishDir = [
            path: { "${params.outdir}/annotation/prokka/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('PROKKA.txt') ? filename : null }
        ]
    }

    withName: RGI {
        publishDir = [
            path: { "${params.outdir}/annotation/rgi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RGI_ADD_COLUMN {
        publishDir = [
            path: { "${params.outdir}/annotation/rgi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('RGI.txt') ? filename : null }
        ]
    }

    withName: MOB_RECON {
        publishDir = [
            path: { "${params.outdir}/annotation/mob_recon/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCAT_MOBSUITE {
        publishDir = [
            path: { "${params.outdir}/annotation/mob_recon/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('MOBSUITE.txt') ? filename : null }
        ]
    }

    withName: BAKTADBDOWNLOAD {
        ext.args = '--type light'
    }

    withName: BAKTA {
        publishDir = [
            path: { "${params.outdir}/annotation/bakta/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA_ADD_COLUMN {
        publishDir = [
            path: { "${params.outdir}/annotation/bakta/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('BAKTA.txt') ? filename : null }
        ]
    }

    withName: DIAMOND_BLAST_CAZY {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_CAZYDB" }
        publishDir = [
            path: { "${params.outdir}/annotation/cazy/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CAZY_FILTER:FILTER_AND_CONCAT_MATCHES' {
        publishDir = [
            path: { "${params.outdir}/annotation/cazy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('CAZY.txt') ? filename : null }
        ]
    }

    withName: '.*VFDB_FILTER:FILTER_AND_CONCAT_MATCHES' {
        publishDir = [
            path: { "${params.outdir}/annotation/vfdb/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('VFDB.txt') ? filename : null }
        ]
    }

    withName: '.*BACMET_FILTER:FILTER_AND_CONCAT_MATCHES' {
        publishDir = [
            path: { "${params.outdir}/annotation/bacmet/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('BACMET.txt') ? filename : null }
        ]
    }

    withName: '.*ICEBERG_FILTER:FILTER_AND_CONCAT_MATCHES' {
        publishDir = [
            path: { "${params.outdir}/annotation/iceberg2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('ICEBERG.txt') ? filename : null }
        ]
    }

    withName: DIAMOND_BLAST_VFDB {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_VFDB" }
        publishDir = [
            path: { "${params.outdir}/annotation/vfdb/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLAST_BACMET {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_BACMET" }
        publishDir = [
            path: { "${params.outdir}/annotation/bacmet/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLAST_ICEBERG {
        ext.args = '--evalue 1e-06 --max-target-seqs 25 --more-sensitive'
        ext.prefix = { "${meta.id}_ICEBERG" }
        publishDir = [
            path: { "${params.outdir}/annotation/iceberg2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIAMOND_BLASTP {
        ext.prefix = { "${db}_${fasta}" }
    }

    withName: ISLANDPATH {
        publishDir = [
            path: { "${params.outdir}/annotation/islandpath/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCAT_ISLANDS {
        publishDir = [
            path: { "${params.outdir}/annotation/islandpath/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('ISLANDPATH.txt') ? filename : null }
        ]
    }

    withName: PHISPY {
        ext.args = '--output_choice 27'
        ext.prefix = { "${meta.id}_phispy" }
        publishDir = [
            path: { "${params.outdir}/annotation/phispy/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHISPY_ADD_COLUMN {
        publishDir = [
            path: { "${params.outdir}/annotation/phispy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('PHISPY.txt') ? filename : null }
        ]
    }

    withName: INTEGRON_FINDER {
        ext.args = '--gbk'
        publishDir = [
            path: { "${params.outdir}/annotation/integron_finder/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCAT_INTEGRONS {
        publishDir = [
            path: { "${params.outdir}/annotation/integron_finder/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('INTEGRONFINDER.txt') ? filename : null }
        ]
    }

    withName: CREATE_REPORT {
        publishDir = [
            path: { "${params.outdir}/annotation/" },
            mode: params.publish_dir_mode,
        ]
    }

    // PopPUNK

    withName: POPPUNK_VISUALISE {
        ext.args = '--microreact'
        publishDir = [
            path: { "${params.outdir}/poppunk_results" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POPPUNK_CREATEDB {
        publishDir = [
            path: { "${params.outdir}/poppunk_results" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POPPUNK_FITMODEL {
        publishDir = [
            path: { "${params.outdir}/poppunk_results" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POPPUNK_EXTRACT_DISTANCES {
        publishDir = [
            path: { "${params.outdir}/poppunk_results/distances/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MAKE_HEATMAP_AND_FILTER {
        publishDir = [
            path: { "${params.outdir}/poppunk_results/distances/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //  pangenomics

    withName: PANAROO_RUN {
        ext.args = "-a pan --clean-mode strict --len_dif_percent 0.70 -c 0.7 -f 0.5 --remove-invalid-genes"
        publishDir = [
            path: { "${params.outdir}/pangenomics/panaroo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GML2GV {
        publishDir = [
            path: { "${params.outdir}/pangenomics/panaroo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PPANGGOLIN_WORKFLOW {
        publishDir = [
            path: { "${params.outdir}/pangenomics/ppanggolin" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PPANGGOLIN_MSA {
        publishDir = [
            path: { "${params.outdir}/pangenomics/ppanggolin" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCAT_ALIGNMENT {
        publishDir = [
            path: { "${params.outdir}/pangenomics/ppanggolin" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('core_gene_alignment.aln') ? filename : null }
        ]
    }

    // phylogenomics
    withName: IQTREE {
        ext.args = '-fast -m HKY+F+G'
        publishDir = [
            path: { "${params.outdir}/phylogenomics/iqtree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GENE_FASTTREE {
        publishDir = [
                path: { "${params.outdir}/phylogenomics/gene_trees" },
                mode: params.publish_dir_mode,
                pattern: "*.tre",
                saveAs: { filename -> filename.equals('versions.yml') || filename.equals('core_gene_alignment.tre') ? null : filename }
            ]
    }

    withName: CORE_FASTTREE {
        publishDir = [
                path: { "${params.outdir}/phylogenomics/reference_tree" },
                mode: params.publish_dir_mode,
                pattern: "core_gene_alignment.tre",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: SNPSITES {
        publishDir = [
            path: { "${params.outdir}/phylogenomics/snpsites" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: RUN_EVOLCCM {
        publishDir = [
            path: { "${params.outdir}/dynamics/EvolCCM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RSPR_APPROX {
        publishDir = [
            path: { "${params.outdir}/dynamics/rSPR" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> if (filename.equals('versions.yml') || filename.matches("(.*)group(.*).csv")) { null } else { filename }}
        ]
    }

    withName: RSPR_EXACT {
        time   = { check_max( 24.h, 'time'    ) }
        errorStrategy = { task.exitStatus in [140] ? 'ignore' : 'retry' }
        publishDir = [
            path: { "${params.outdir}/dynamics/rSPR/exact" },
            pattern: '^(?!exact_output_.*)tsv$',
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RSPR_HEATMAP {
        publishDir = [
            path: { "${params.outdir}/dynamics/rSPR/exact" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FEATURE_DISPERSION {
        publishDir = [
            path: { "${params.outdir}/phylogenomics/feature_dispersion" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: BUILD_UPSET {
        publishDir = [
            path: { "${params.outdir}/annotation/upsets" },
            mode: params.publish_dir_mode,
        ]
    }

    // Recombination
    withName: VERTICALL_PAIRWISE {
        ext.prefix = { "cluster_${cluster}" }
        publishDir = [
            path: { "${params.outdir}/dynamics/recombination/verticall" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SKA2 {
        publishDir = [
            path: { "${params.outdir}/dynamics/recombination/ska2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GUBBINS {
        ext.args = '--tree-builder fasttree'
        publishDir = [
            path: { "${params.outdir}/dynamics/recombination/gubbins/cluster_${cluster}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    // Gene Order Workflow
    withName: EXTRACTION {
        publishDir = [
            path: { "${params.outdir}/gene-order/extraction" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('JSON') ? null : filename }
        ]
    }

    withName: DIAMOND_GENE_ORDER {
        publishDir = [
            path: { "${params.outdir}/gene-order/diamond" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CLUSTERING {
        publishDir = [
            path: { "${params.outdir}/gene-order/clustering" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GET_SOFTWARE_VERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
